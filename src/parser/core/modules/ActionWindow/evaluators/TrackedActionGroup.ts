import {Action} from 'data/ACTIONS'
import {SeverityTiers} from '../../Suggestions/Suggestion'
import {EvaluatedAction} from '../EvaluatedAction'
import {HistoryEntry} from '../History'
import {OutcomeCalculator} from './TrackedAction'

/**
 * Defines a set of actions to be tracked together by an evaluator.
 * All actions are allowed, GCD or otherwise.
 */
export interface TrackedActionGroup {
	/**
	 * The actions to track.
	 */
	actions: Action[]
	/**
	 * The number of uses expected per window.
	 * This may be a minimum or maximum depending on the evaluator.
	 */
	expectedPerWindow: number
}

/**
 * Constructor options class for evaluators that track action groups with an
 * expected use count per window.
 */
export interface TrackedActionGroupsOptions {
	expectedActionGroups: TrackedActionGroup[]
	suggestionIcon: string
	suggestionContent: JSX.Element
	/**
	 * This is the name of the window used in the why portion of suggestions generated by these evaluators.
	 * A DataLink with showIcon={false} or a Trans tag with an alternate name are recommended.
	 */
	suggestionWindowName: JSX.Element
	severityTiers: SeverityTiers
	/**
	 * This method MAY be provided to adjust the expected number of uses of a tracked action group within a given window.
	 * This method IS responsible for calculating ALL reductions INCLUDING due to end of fight rushing.
	 * @param window The window for which the expected tracked action count will be adjusted
	 * @param action The action group whose count will be adjusted
	 * @returns An adjustment to add to the expected count. A positive number INCREASES the
	 * number of expected uses; a negative number DECREASES the number of expected uses.
	 */
	adjustCount?: (window: HistoryEntry<EvaluatedAction[]>, action: TrackedActionGroup) => number
	/**
	 * This method MAY be provided to adjust the highlighting outcome of an evaluation for a tracked action group within a given window.
	 * @param buffWindow The window for which the tracked action outcome will be adjusted
	 * @param action The action group whose outcome will be adjusted
	 * @returns A function that takes actual and expected uses and return the adjusted RotationTargetOutcome or
	 * undefined to use the default logic for this window and action combination.
	 */
	adjustOutcome?: (window: HistoryEntry<EvaluatedAction[]>, action: TrackedActionGroup) => OutcomeCalculator | undefined
}
