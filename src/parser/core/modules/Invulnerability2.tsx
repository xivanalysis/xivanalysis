import {Event, Resource} from 'event'
import _ from 'lodash'
import React from 'react'
import {Actor, ReportMetaKey} from 'report'
import * as TB from 'ts-toolbelt'
import {Analyser} from '../Analyser'
import {exists, filter, oneOf} from '../filter'
import {dependency} from '../Injectable'
import {Actors} from './Actors'
import {SimpleItem, SimpleRow, Timeline} from './Timeline'

export enum Check {
	/** Mark an actor as targetable when it is first targeted by an event. */
	FIRST_TARGETED,
	/** Check actor updates for changes to actor targetability. */
	TARGETABLE,
	/** Consider an actor as untargetable on death. */
	DEATH,
	/**
	 * Consider an actor as untargetable on hitting 1HP or being overkilled.
	 * Use for actors that do not die in a typical manner.
	 */
	OVERKILL,
}

const DEFAULT_CHECKS = [
	Check.FIRST_TARGETED,
	Check.TARGETABLE,
	Check.DEATH,
]

interface IncludedActorConfig {
	/**
	 * Checks to perform to determine targetability.
	 * Defaults to [FIRST_TARGETED, TARGETABLE, DEATH].
	 */
	checks?: Check[]

	/**
	 * Mirror 'untargetable' invuln windows into 'invulnerable' windows.
	 * Default `true`. Disable for actors that take damage while untargetable -
	 * you will need to add custom logic to add the invulnerable windows yourself.
	 */
	mirrorToInvuln?: boolean
}

type ActorConfig =
	& {kind: Record<ReportMetaKey, Actor['kind']>}
	& (
		| {exclude: true}
		| ({exclude?: false} & IncludedActorConfig)
	)

export type ActorsConfig = ActorConfig[]

const sharedActorConfig: ActorsConfig = [
	// Exclude unknown actors
	{kind: {legacyFflogs: 'unknown'}, exclude: true},
]

type Type = 'invulnerable' | 'untargetable'

interface Window {
	type: Type
	active: boolean
	start: number
	end: number
}

export class Invulnerability extends Analyser {
	static handle = 'invulnerability'
	static debug = true

	@dependency private actors!: Actors
	@dependency private timeline!: Timeline

	/**
	 * Array of configuration overrides. The default configuration should be fine
	 * for most actors - add an override if the derived invulnerability windows
	 * look wrong.
	 */
	protected actorConfig: ActorConfig[] = []

	private skipMirroring = new Set<Actor['id']>()
	private windows = new Map<Actor['id'], Window[]>()

	initialise() {
		const reportSource = this.parser.newReport.meta.source

		// Flatten any subclass actor config to a map by the current report sources'
		// kind keys, for faster lookups later.
		const flatConfig = new Map([...sharedActorConfig, ...this.actorConfig].map(config => [
			config.kind[reportSource],
			config,
		]))

		// Group actors by the checks that should be performed on them.
		const actorChecks = new Map<Check, Array<Actor['id']>>()
		for (const actor of this.parser.pull.actors) {
			// Skip player-controlled actors and their pets
			// TODO: This is primarily for consistency with old systems. Consider if it's feasible to track PCs.
			if (this.isPlayerDerived(actor)) {
				continue
			}

			const config = flatConfig.get(actor.kind)

			// If the actor has been explicitly excluded, skip it entirely
			if (config != null && config.exclude) {
				continue
			}

			// Check if this actor should not be mirrored
			if (config?.mirrorToInvuln === false) {
				this.skipMirroring.add(actor.id)
			}

			// Add the actor to each of the check keys it is configured for
			const checks = config?.checks ?? DEFAULT_CHECKS
			for (const check of checks) {
				let foo = actorChecks.get(check)
				if (foo == null) {
					foo = []
					actorChecks.set(check, foo)
				}
				foo.push(actor.id)
			}
		}

		// Set up hooks for each check
		const addHooksFns: Record<Check, (actorIds: Array<Actor['id']>) => void> = {
			[Check.TARGETABLE]: this.addTargetableHooks,
			[Check.DEATH]: this.addDeathHooks,
			[Check.OVERKILL]: this.addOverkillHooks,
			[Check.FIRST_TARGETED]: this.addFirstTargetedHooks,
		}
		for (const [check, ids] of actorChecks) {
			addHooksFns[check](ids)
		}

		// TODO: LEGACY?
		// probably should just allow narrowing support ranges and drop legacy range

		this.debug(() => this.addEventHook('complete', this.renderDebugTimelineData))
	}

	private isPlayerDerived = (actor: Actor): boolean => false
		|| actor.playerControlled
		|| (actor.owner != null && this.isPlayerDerived(actor.owner))

	private addTargetableHooks = (actorIds: Array<Actor['id']>) => {
		// Preemptively start the first window at the beginning of the fight in case
		// the actor has been configured without first targeted
		for (const id of actorIds) {
			this.startWindow(id, this.parser.pull.timestamp)
		}

		this.addEventHook(
			filter<Event>()
				.type('actorUpdate')
				.actor(oneOf(actorIds))
				.targetable(exists),
			event => {
				// This should never be hit, but sanity check anyway
				if (event.targetable == null) { return }

				event.targetable
					? this.endWindow(event.actor, event.timestamp)
					: this.startWindow(event.actor, event.timestamp)
			}
		)
	}

	private addDeathHooks = (actorIds: Array<Actor['id']>) => {
		this.addEventHook(
			filter<Event>()
				.type('actorUpdate')
				.actor(oneOf(actorIds))
				.hp(filter<Resource>().current(0)),
			event => this.startWindow(event.actor, event.timestamp),
		)
	}

	private addOverkillHooks = (actorIds: Array<Actor['id']>) => {
		// Hook both overkill and an update to 1HP to ensure all cases are caught
		this.addEventHook(
			filter<Event>()
				.type('damage')
				.target(oneOf(actorIds))
				.overkill((v): v is number => v > 0),
			event => this.startWindow(event.target, event.timestamp),
		)
		this.addEventHook(
			filter<Event>()
				.type('actorUpdate')
				.actor(oneOf(actorIds))
				.hp(filter<Resource>().current(1)),
			event => this.startWindow(event.actor, event.timestamp),
		)
	}

	private addFirstTargetedHooks = (actorIds: Array<Actor['id']>) => {
		// Preemptively start the first window at the beginning of the fight
		for (const id of actorIds) {
			this.startWindow(id, this.parser.pull.timestamp)
		}

		// Exclude status updates, it's relatively common for player statuses to be mirrored to
		// untargetable actors, and we don't want that to crop up and cause issues.
		const ensureEventTypes = <T extends Event['type']>(types: T[]) => types
		const ignoredTypes = ensureEventTypes(['statusApply', 'statusRemove'])

		// This is basically an inverse oneOf
		// TODO: Look into genericising this. Will require some type hackery in filter, hence not doing right now.
		type PermittedTypes = TB.Union.Filter<
			Event['type'],
			(typeof ignoredTypes) extends Array<infer T> ? T : never
		>
		const ignoredTypesSet = new Set<Event['type']>(ignoredTypes)
		const matchType = (value: Event['type']): value is PermittedTypes => !ignoredTypesSet.has(value)

		// Track actors that have been seen so they may be skipped. If you're thinking
		// of copying this pattern, probably don't - preference adding temporary hooks
		// that you remove once they've done their job. This is only implemented with
		// a single hook here due to the majority of the 100+ mechanic actors common in
		// complex fights never removing their hook, and just chew unnessecary time.
		const seenActors = new Set<Actor['id']>()

		this.addEventHook(
			filter<Event>()
				.type(matchType)
				.target(oneOf(actorIds)),
			event => {
				// If the event is self-targeted, doesn't mean much - skip it
				// TODO: Look into moving this to the filter? Doing so will require access to event data in filter matchers, check lodash docs.
				// Also skip anything from targets we've already tracked a window for, we're only interested in the first event.
				if (
					seenActors.has(event.target)
					|| event.target === event.source
				) {
					return
				}

				seenActors.add(event.target)
				this.endWindow(event.target, event.timestamp)
			}
		)
	}

	private startWindow = (actorId: Actor['id'], timestamp: number) =>
		this.manageConfigWindows(this.startTypeWindow, actorId, timestamp)

	private endWindow = (actorId: Actor['id'], timestamp: number) =>
		this.manageConfigWindows(this.endTypeWindow, actorId, timestamp)

	private manageConfigWindows(
		fn: (type: Type, actor: Actor, timestamp: number) => void,
		actorId: Actor['id'],
		timestamp: number,
	) {
		const actor = this.actors.get(actorId)

		// Start the untargetable window, mirroring to invuln if configured to do so
		fn('untargetable', actor, timestamp)
		if (!this.skipMirroring.has(actorId)) {
			fn('invulnerable', actor, timestamp)
		}
	}

	private startTypeWindow = (type: Type, actor: Actor, timestamp: number) => {
		const windows = this.getActorWindows(actor)

		// If there's already an active window, piggyback on it
		const activeWindow = _.findLast(
			windows,
			window => window.active && window.type === type,
		)
		if (activeWindow != null) {
			return
		}

		// Build & save the new window
		const window: Window = {
			active: true,
			type,
			start: timestamp,
			end: this.parser.pull.timestamp + this.parser.pull.duration,
		}
		windows.push(window)
	}

	private endTypeWindow = (type: Type, actor: Actor, timestamp: number) => {
		const windows = this.getActorWindows(actor)

		const activeWindow = _.findLast(
			windows,
			window => window.active && window.type === type
		)

		// If there's nothing open that we can close, throw. We can't sanely backfill in many cases,
		// as it may technically change historical information that other modules have already read.
		if (activeWindow == null) {
			throw new Error(`Actor ${actor.id} has no active ${type} window to end.`)
		}

		activeWindow.active = false
		activeWindow.end = Math.max(timestamp, activeWindow.start)
	}

	// TODO: Expose with options, ooor?
	private getActorWindows(actor: Actor) {
		let windows = this.windows.get(actor.id)
		if (windows == null) {
			windows = []
			this.windows.set(actor.id, windows)
		}
		return windows
	}

	private renderDebugTimelineData() {
		const startTime = this.parser.pull.timestamp
		const endTime = startTime + this.parser.pull.duration

		const parentRow = this.timeline.addRow(new SimpleRow({
			label: 'Invuln2 Debug',
			order: -Infinity,
		}))

		const kindRows = new Map<Actor['kind'], SimpleRow>()

		for (const [actorId, windows] of this.windows) {
			const actor = this.actors.get(actorId)

			let kindRow = kindRows.get(actor.kind)
			if (kindRow == null) {
				kindRow = parentRow.addRow(new SimpleRow({
					label: actor.kind,
				}))
				kindRows.set(actor.kind, kindRow)
			}

			const actorRow = kindRow.addRow(new SimpleRow({
				label: `${actor.name} (${actor.id})`,
				collapse: true,
			}))

			const invulnerableRow = actorRow.addRow(new SimpleRow({
				label: 'invulnerable',
			}))
			const untargetableRow = actorRow.addRow(new SimpleRow({
				label: 'untargetable',
			}))

			for (const window of windows) {
				// Windows that run the full length of the fight are meaningless to display
				if (window.start <= startTime && window.end >= endTime) {
					continue
				}

				const row = window.type === 'invulnerable'
					? invulnerableRow
					: untargetableRow
				row.addItem(new SimpleItem({
					start: window.start - startTime,
					end: window.end - startTime,
					content: <div style={{width: '100%', height: '100%', backgroundColor: '#faa8'}}/>,
				}))
			}
		}
	}
}
